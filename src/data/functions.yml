---
- name: aggregate
  signature: "def aggregate[B](z: ⇒ B)(seqop: (B, A) ⇒ B, combop: (B, B) ⇒ B): B"
  description:
    en: Aggregates the results of applying an operator to subsequent elements.
    es: Agrega los resultados de aplicar un operador a elementos subsecuentes.
  figures:
  - en: <code>aggregate</code> applies <var>seqop</var> to adjacent elements and then combines these results with <code>combop</code>.
    es: <code>aggregate</code> aplica <var>seqop</var> a elementos adyacentes y luego combina estos resultados con <code>combop</code>.
  - en: <code>aggregate</code> returns <var>z</var> on empty collections.
    es: <code>aggregate</code> devuelve <var>z</var> en colecciones vacías.

- name: collect
  signature: "def collect[B](pf: PartialFunction[A, B]): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a partial function to all elements of this collection on which the function is defined.
    es: Construye una nueva colección aplicando una función parcial a todos los elementos de esta colección para los que dicha función está definida.
  figures:
  - en: <code>collect</code> applies <code>pf</code> only to those elements on which <code>pf</code> is defined, discarding the others.
    es: <code>collect</code> aplica <code>pf</code> sólo a aquellos elementos para los que <code>pf</code> está definida, descartando el resto.

- name: collectFirst
  signature: "def collectFirst[B](pf: PartialFunction[A, B]): Option[B]"
  description:
    en: Finds the first element of the collection on which the given partial function is defined, and applies the partial function to it.
    es: Encuentra el primer elemento de la colección para el cual está definida una función parcial, aplicando después dicha función parcial.
  figures:
  - en: <code>collectFirst</code> applies <code>pf</code> on the first element on which <code>pf</code> is defined and returns the result wrapped with <code>Some</code>.
    es: <code>collectFirst</code> aplica <code>pf</code> al primer elemento para el que <code>pf</code> está definida y devuelve el resultado envuelto con <code>Some</code>.
  - en: <code>collectFirst</code> returns <code>None</code> when <code>pf</code> is not defined for any element.
    es: <code>collectFirst</code> devuelve <code>None</code> cuando <code>pf</code> no está definida para ningún elemento.

- name: combinations
  signature: "def combinations(n: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over combinations.
    es: Itera sobre combinaciones.

- name: concat
  signature: "def <em>Collection</em>.concat(xss: Traversable[A]*): <em>Collection</em>[A]"
  description:
    en: Concatenates all argument collections into a single collection.
    es: Concatena todas las colecciones argumento en una única colección.

- name: contains
  signature: "def contains[A1 >: A](elem: A1): Boolean"
  description:
    en: Tests whether this collection contains a given value as an element.
    es: Comprueba si esta colección contiene un valor dado en forma de elemento.
  figures:
  - en: <code>contains</code> returns <code>true</code> if at least one element of a collection is <em>equal to</em> <var>elem</var>.
    es: <code>contains</code> devuelve <code>true</code> si al menos un elemento de una colección es <em>igual a</em> <var>elem</var>.
  - en: <code>contains</code> returns <code>false</code> if a collection does not contain any element <em>equal to</em> <var>elem</var>.
    es: <code>contains</code> devuelve <code>false</code> si una colección no contiene ningún elemento <em>igual a</em> <var>elem</var>.

- name: containsSlice
  signature: "def containsSlice[B](that: GenSeq[B]): Boolean"
  description:
    en: Tests whether this collection contains a given sequence as a slice.
    es: Comprueba si esta colección contiene una secuencia dada en forma de subcolección.
  figures:
  - en: <code>containsSlice</code> returns <code>true</code> if <var>that</var> can be found in form of subsequence.
    es: <code>containsSlice</code> devuelve <code>true</code> si <var>that</var> puede ser encontrada en forma de subsecuencia.

- name: count
  signature: "def count(p: (A) ⇒ Boolean): Int"
  description:
    en: Counts the number of elements in the collection which satisfy a predicate.
    es: Cuenta el número de elementos en la colección que satisfacen un predicado.
  figures:
  - en: <code>count</code> counts how many elements satisfy <code>p</code>.
    es: <code>count</code> cuenta cuántos elementos satisfacen <code>p</code>.

- name: diff
  signature: "def diff(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Computes the multiset difference between this and another collection.
    es: Calcula la diferencia multiconjunto entre esta colección y otra.

- name: distinct
  signature: "def distinct: <em>Collection</em>[A]"
  description:
    en: Builds a new collection from this one without any duplicate elements.
    es: Construye una nueva colección a partir de esta sin ningún elemento duplicado.

- name: drop
  signature: "def drop(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects all elements except the first <var>n</var> ones.
    es: Selecciona todos los elementos excepto los <var>n</var> primeros.

- name: dropRight
  signature: "def dropRight(n: Int): <em>Collection</em>[A]"
  description:
    en: Select all elements except last <var>n</var> ones.
    es: Selecciona todos los elementos excepto los <var>n</var> últimos.
  figures:
  - en: <code>dropRight</code> discards the last <var>n</var> elements.
    es: <code>dropRight</code> descarta los últimos <var>n</var> elementos.

- name: dropWhile
  signature: "def dropWhile(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Drops longest prefix of elements that satisfy a predicate.
    es: Descarta el mayor prefijo de elementos que satisfacen un predicado.
  figures:
  - en: <code>dropWhile</code> discards elements while they satisfy <code>p</code>.
    es: <code>dropWhile</code> descarta elementos mientras satisfacen <code>p</code>.

- name: endsWith
  signature: "def endsWith[B](that: GenSeq[B]): Boolean"
  description:
    en: Tests whether this collection ends with the given sequence.
    es: Comprueba si esta colección termina con una secuencia dada.

- name: exists
  signature: "def exists(p: (A) ⇒ Boolean): Boolean"
  description:
    en: Tests whether a predicate holds for at least one element of this collection.
    es: Comprueba si un predicado es válido para al menos un elemento de esta colección.
  figures:
  - en: <code>exists</code> returns <code>true</code> when a collection contains one or more elements that satisfy <code>p</code>.
    es: <code>exists</code> devuelve <code>true</code> cuando una colección contiene uno o más elementos que satisfacen <code>p</code>.
  - en: <code>exists</code> returns <code>false</code> when no element in the collection satisfies <code>p</code>.
    es: <code>exists</code> devuelve <code>false</code> cuando ningún elemento en la colección satisface <code>p</code>.

- name: fill
  signature: "def <em>Collection</em>.fill[A](n<sub>1</sub>: Int, ..., n<sub>m</sub>: Int)(elem: ⇒ A): <em>Collection</em>[... <em>Collection</em>[A] ...]"
  description:
    en: Produces a n-dimensional collection containing the results of some element computation a number of times.
    es: Produce una colección n-dimensional que contiene el resultado de cierta computación para un elemento un numero de veces.
  figures:
  - en: <code>fill</code> produces a n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional collection using <var>elem</var> as element.
    es: <code>fill</code> produce una colección n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional utilizando <var>elem</var> como elemento.

- name: filter
  signature: "def filter(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Selects all elements of this traversable collection which satisfy a predicate.
    es: Selecciona todos los elementos de la colección que satisfacen un predicado.
  figures:
  - en: <code>filter</code> preserves only those elements that satisfy <code>p</code>.
    es: <code>filter</code> conserva solo aquellos elementos que satisfacen <code>p</code>.

- name: filterKeys
  signature: "def filterKeys(p: (K) ⇒ Boolean): Map[K, V]"
  description:
    en: Filters this map by retaining only keys satisfying a predicate.
    es: Filtra esta mapa reteniendo solo las claves que satisfacen un predicado.
  figures:
  - en: <code>filterKeys</code> preserves only those elements whose key satisfies <code>p</code>.
    es: <code>filterKeys</code> conserva solo aquellos elementos cuya clave satisface <code>p</code>.

- name: filterNot
  signature: "def filterNot(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Selects all elements of this collection which do not satisfy a predicate.
    es: Selecciona todos los elementos de la colección que no satisfacen un predicado.
  figures:
  - en: <code>filterNot</code> preserves only those elements that does not satisfy <code>p</code>.
    es: <code>filterNot</code> conserva solo aquellos elementos que no satisfacen <code>p</code>.

- name: find
  signature: "def find(p: (A) ⇒ Boolean): Option[A]"
  description:
    en: Finds the first element of the collection satisfying a predicate, if any.
    es: Encuentra el primer elemento de la colección que satisface un predicado, si es que existe.
  figures:
  - en: If a collection contains one or more elements that satisfy <code>p</code> then <code>find</code> returns the first of them wrapped with <code>Some</code>.
    es: Si una colección contiene uno o más elementos que satisfacen <code>p</code> entonces <code>find</code> devuelve el primero de ellos envuelto con <code>Some</code>.
  - en: If no element in a collection satisfies <code>p</code> then <code>find</code> returns <code>None</code>.
    es: Si ningún elemento de una colección satisface <code>p</code> entonces <code>find</code> devuelve <code>None</code>.

- name: flatMap
  signature: "def flatMap[B](f: (A) ⇒ <em>Collection</em>[B]): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection and using the elements of the resulting collections.
    es: Construye una nueva colección tras aplicar una función a todos los elementos de esta colección. La función devuelve una colección de elementos.

- name: flatten
  signature: "def flatten[B]: <em>Collection</em>[B]"
  description:
    en: Converts this collection of collections into a collection formed by the elements of the inner collections.
    es: Convierte esta colección de colecciones en una colección compuesta por los elementos de las colecciones internas.

- name: fold
  signature: "def fold[A1 >: A](z: A1)(op: (A1, A1) ⇒ A1): A1"
  description:
    en: Folds the elements of this collection using the specified associative binary operator.
    es: Pliega los elementos de esta colección utilizando un operador binario asociativo.

- name: foldLeft
  signature: "def foldLeft[B](z: B)(op: (B, A) ⇒ B): B"
  description:
    en: Applies a binary operator to a start value and all elements of this collection, going left to right.
    es: Aplica un operador binario a un valor inicial y a todos los elementos de la colección, yendo de izquierda a derecha.
  figures:
  - en: <code>foldLeft</code> applies <code>op</code> to the previous <code>op</code>'s result and the current element, going from left to right. The initial result is set to <var>z</var>.
    es: <code>foldLeft</code> aplica <code>op</code> al anterior resultado de <code>op</code> y al elemento actual, yendo de izquierda a derecha. El resultado inicial se establece a <var>z</var>.
  - en: When a collection is empty <code>foldLeft</code> returns the <var>z</var> parameter.
    es: Cuando una colección es vacía <code>foldLeft</code> devuelve el parámetro <var>z</var>.

- name: foldRight
  signature: "def foldRight[B](z: B)(op: (A, B) ⇒ B): B"
  description:
    en: Applies a binary operator to a start value and all elements of this collection, going right to left.
    es: Aplica un operador binario a un valor inicial y a todos los elementos de la colección, yendo de derecha a izquierda.
  figures:
  - en: <code>foldRight</code> applies <code>op</code> to the previous <code>op</code>'s result and the current element, going from right to left. The initial result is set to <var>z</var>.
    es: <code>foldRight</code> aplica <code>op</code> al anterior resultado de <code>op</code> y al elemento actual, yendo de derecha a izquierda. El resultado inicial se establece a <var>z</var>.
  - en: When a collection is empty <code>foldRight</code> returns the <var>z</var> parameter.
    es: Cuando una colección es vacía <code>foldRight</code> devuelve el parámetro <var>z</var>.

- name: forall
  signature: "def forall(p: (A) ⇒ Boolean): Boolean"
  description:
    en: Tests whether a predicate holds for all elements of this collection.
    es: Comprueba si un predicado es válido para todos los elementos de esta colección.
  figures:
  - en: <code>forall</code> returns <code>false</code> when a collection contains one or more elements that does not satisfy <code>p</code>.
    es: <code>forall</code> devuelve <code>false</code> cuando una colección contiene uno o más elementos que no satisfacen <code>p</code>.
  - en: <code>forall</code> returns <code>true</code> when all elements in the collection satisfy <code>p</code>.
    es: <code>forall</code> devuelve <code>true</code> cuando todos los elementos en la colección satisfacen <code>p</code>.

- name: foreach
  signature: "def foreach(f: (A) ⇒ Unit): Unit"
  description:
    en: Applies a function <var>f</var> to all elements of this collection.
    es: Aplica una función <var>f</var> a todos los elementos de esta colección.

- name: getOrElse
  signature: "def getOrElse(key: K, default: ⇒ V): V"
  description:
    en: Returns the value associated with a key, or a default value if the key is not contained in the map.
    es: Devuelve el valor asociado a una clavo o un valor predeterminado si el mapa no contiene dicha clave.

- name: groupBy
  signature: "def groupBy[K](f: (A) ⇒ K): Map[K, <em>Collection</em>[A]]"
  description:
    en: Partitions this collection into a map of collections according to some discriminator function.
    es: Parte esta colección en un mapa de colecciones de acuerdo a una función discriminadora.

- name: grouped
  signature: "def grouped(size: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Partitions elements in fixed size iterable collections.
    es: Parte los elementos en colecciones iterables de tamaño fijo.

- name: head
  signature: "def head: A"
  description:
    en: Selects the first element of this collection.
    es: Selecciona el primer elemento de esta colección.
  figures:
  - en: <code>head</code> returns the first element of a collection.
    es: <code>head</code> devuelve el primer elemento de una colección.
  - en: When a collection has a single element <code>head</code> returns that element.
    es: Cuando una colección solo tiene un único elemento <code>head</code> devuelve dicho elemento.
  - en: <code>head</code> throws <code>NoSuchElementException</code> on empty collections.
    es: <code>head</code> lanza <code>NoSuchElementException</code> en colecciones vacías.

- name: headOption
  signature: "def headOption: Option[A]"
  description:
    en: Optionally selects the first element.
    es: Opcionalmente selecciona el primer elemento de esta colección.
  figures:
  - en: <code>headOption</code> returns the first element of a collection wrapped with <code>Some</code>.
    es: <code>headOption</code> devuelve el primer elemento de una colección envuelto con <code>Some</code>
  - en: <code>headOption</code> returns <code>None</code> on empty collections.
    es: <code>headOption</code> devuelve <code>None</code> en colecciones vacías.

- name: indexOf
  signature: "def indexOf(elem: A, from: Int): Int"
  description:
    en: Finds index of first occurrence of some value in this collection after or at some start index.
    es: Encuentra el índice de la primera ocurrencia de algún valor en esta colección empezando por un índice inicial.
  figures:
  - en: <code>indexOf</code> returns the index of the first element that, starting at <var>from</var>, is <em>equal to</em> <var>elem</var>.
    es: <code>indexOf</code> devuelve el índice del primer elemento que, empezando por <var>from</var>, es <em>igual a</em> <var>elem</var>.
  - en: If a collection does not contain any element in or after <var>from</var> <em>equal to</em> <var>elem</var> then <code>indexOf</code> returns -1.
    es: Si una coleción no contiene ningún elemento ubicado en o después de <var>from</var> <em>igual a</em> <var>elem</var> entonces <code>indexOf</code> devuelve -1.

- name: indexOfSlice
  signature: "def indexOfSlice[B >: A](that: GenSeq[B], from: Int): Int"
  description:
    en: Finds first index after or at a start index where this collection contains a given sequence as a slice.
    es: Encuentra el primer índice empezando por uno inicial donde esta colección contiene una secuencia dada como subcolección.

- name: indexWhere
  signature: "def indexWhere(p: (A) ⇒ Boolean, from: Int): Int"
  description:
    en: Finds index of the first element satisfying some predicate after or at some start index.
    es: Encuentra el índice el primer elemento que satisface un predicado empezando por un índice inicial.
  figures:
  - en: <code>indexWhere</code> returns the index of the first element that, starting at <var>from</var>, satisfies the predicate <var>p</var>.
    es: <code>indexWhere</code> devuelve el índice del primer elemento que, empezando por <var>from</var>, satisface el predicado <var>p</var>.
  - en: If a collection does not contain any element in or after <var>from</var> that satisfies <var>p</var> then <code>indexWhere</code> returns -1.
    es: Si una coleción no contiene ningún elemento ubicado en o después de <var>from</var> que satisface <var>p</var> entonces <code>indexWhere</code> devuelve -1.

- name: indices
  signature: "def indices: Range"
  description:
    en: Produces the range of all indices of this collection.
    es: Produce un rango con todos los índices de esta colección.

- name: init
  signature: "def init: <em>Collection</em>[A]"
  description:
    en: Select all elements except the last.
    es: Selecciona todos los elementos excepto el último.
  figures:
  - en: <code>init</code> returns all but the last element of a collection.
    es: <code>init</code> devuelve todos excepto el último elemento de una colección.
  - en: When a collection has a single element <code>init</code> returns an empty collection.
    es: Cuando una colección solo tiene un único elemento <code>init</code> devuelve una colección vacía.
  - en: <code>init</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>init</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: inits
  signature: "def inits: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over the inits of this collection.
    es: Itera sobre los <code>inits</code> de esta colección.

- name: intersect
  signature: "def intersect(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Computes the multiset intersection between this collection and another sequence.
    es: Computa la intersección multiconjunto entre esta colección y otra secuencia.

- name: isEmpty
  signature: "def isEmpty: Boolean"
  description:
    en: Tests whether this collection is empty.
    es: Comprueba si esta colección está vacía.
  figures:
  - en: <code>isEmpty</code> returns <code>false</code> if a collection has one or more elements.
    es: <code>isEmpty</code> devuelve <code>false</code> si una colección tiene uno o más elementos.
  - en: <code>isEmpty</code> returns <code>true</code> if a collection has no elements.
    es: <code>isEmpty</code> devuelve <code>true</code> si una colección no tiene elementos.

- name: keys
  signature: "def keys: Iterable[K]"
  description:
    en: Collects all keys of this map in an iterable collection.
    es: Recopila todas las claves de este mapa en una coleccion iterable.

- name: last
  signature: "def last: A"
  description:
    en: Selects the last element.
    es: Selecciona el último elemento.
  figures:
  - en: <code>last</code> returns the last element of a collection.
    es: <code>last</code> devuelve el último elemento de una colección.
  - en: When a collection has a single element <code>last</code> returns that element.
    es: Cuando una colección solo tiene un único elemento <code>last</code> devuelve dicho elemento.
  - en: <code>last</code> throws <code>NoSuchElementException</code> on empty collections.
    es: <code>last</code> lanza <code>NoSuchElementException</code> en colecciones vacías.

- name: lastIndexOf
  signature: "def lastIndexOf(elem: A, end: Int): Int"
  description:
    en: Finds index of last occurrence of some value in this colección before or at a given end index.
    es: Encuentra el índice de la última ocurrencia de algún valor en esta colección antes de un índice en particular.

- name: lastIndexOfSlice
  signature: "def lastIndexOfSlice[B >: A](that: GenSeq[B], end: Int): Int"
  description:
    en: Finds last index before or at a given end index where this collection contains a given sequence as a slice.
    es: Encuentra el último índice antes de uno en particular donde esta colección contiene una secuencia dada como subcolección.

- name: lastIndexWhere
  signature: "def lastIndexWhere(p: (A) ⇒ Boolean, end: Int): Int"
  description:
    en: Finds index of last element satisfying some predicate before or at a given end index.
    es: Encuentra el índice del último elemento que satisface algún predicado antes de un índice en particular.

- name: lastOption
  signature: "def lastOption: Option[A]"
  description:
    en: Optionally selects the last element.
    es: Opcionalmente selecciona el último elemento.
  figures:
  - en: <code>lastOption</code> returns the last element of a collection wrapped with <code>Some</code>.
    es: <code>lastOption</code> devuelve el último elemento de una colección envuelto con <code>Some</code>
  - en: <code>lastOption</code> returns <code>None</code> on empty collections.
    es: <code>lastOption</code> devuelve <code>None</code> en colecciones vacías.

- name: length
  signature: "def length: Int"
  description:
    en: The length of the collection.
    es: La longitud de la colección.

- name: map
  signature: "def map[B](f: (A) ⇒ B): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection.
    es: Construye una nueva colección aplicando una función a todos los elementos de esta colección.

- name: mapConserve
  signature: "def mapConserve(f: (A) ⇒ A): <em>Collection</em>[A]"
  description:
    en:
      Builds a new collection by applying a function to all elements of this collection.
      Like <code>xs map f</code>, but returns <var>xs</var> unchanged if function <var>f</var> maps all elements to themselves (as determined by <var>eq</var>)
    es:
      Construye una nueva colección aplicando una función a todos los elementos de esta colección.
      Igual que <code>xs map f</code> pero devuelve <var>xs</var> intacto si la función <var>f</var> mapea todos los elementos a sí mismos (determinado por <var>eq</var>)

- name: mapValues
  signature: "def mapValues[W](f: (V) ⇒ W): Map[K, W]"
  description:
    en: Transforms this map by applying a function to every retrieved value.
    es: Transforma este mapa aplicando una función a cada valor.

- name: max
  signature: "def max: A"
  description:
    en: Finds the largest element.
    es: Encuentra el mayor elemento.
  figures:
  - en: <code>max</code> finds the element with the largest valut in a collection.
    es: <code>max</code> encuentra el elemento con mayor valor en una colección.
  - en: <code>max</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>max</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: maxBy
  signature: "def maxBy[B](f: (A) ⇒ B): A"
  description:
    en: Finds the first element which yields the largest value measured by function <var>f</var>.
    es: Encuentra el primer elemento que arroja el mayor valor medido por la función <var>f</var>.
  figures:
  - en: <code>maxBy</code> returns the element that, once applied <var>f</var>, yields the largest value.
    es: <code>maxBy</code> devuelve el elemento que, una vez aplicado <var>f</var> emite el mayor valor.
  - en: <code>maxBy</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>maxBy</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: min
  signature: "def min: A"
  description:
    en: Finds the smallest element.
    es: Encuentra el menor elemento.
  figures:
  - en: <code>min</code> finds the element with the smallest valut in a collection.
    es: <code>min</code> encuentra el elemento con menor valor en una colección.
  - en: <code>min</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>min</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: minBy
  signature: "def minBy[B](f: (A) ⇒ B): A"
  description:
    en: Finds the first element which yields the smallest value measured by function <var>f</var>.
    es: Encuentra el primer elemento que arroja el menor valor medido por la función <var>f</var>.
  figures:
  - en: <code>minBy</code> returns the element that, once applied <var>f</var>, yields the smallest value.
    es: <code>minBy</code> devuelve el elemento que, una vez aplicado <var>f</var> emite el menor valor.
  - en: <code>minBy</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>minBy</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: mkString
  signature: "def mkString(start: String, sep: String, end: String): String"
  description:
    en: Displays all elements of this collection in a string.
    es: Muestra todos los elementos de esta colección como una cadena.

- name: nonEmpty
  signature: "def nonEmpty: Boolean"
  description:
    en: Tests whether the collection is not empty.
    es: Comprueba si esta colección es no vacía.
  figures:
  - en: <code>nonEmpty</code> returns <code>true</code> if a collection has one or more elements.
    es: <code>nonEmpty</code> devuelve <code>true</code> si una colección tiene uno o más elementos.
  - en: <code>nonEmpty</code> returns <code>false</code> if a collection has no elements.
    es: <code>nonEmpty</code> devuelve <code>false</code> si una colección no tiene elementos.

- name: padTo
  signature: "def padTo(len: Int, elem: A): <em>Collection</em>[A]"
  description:
    en: A copy of this collection with an element value appended until a given target length is reached.
    es: Una copia de esta colección anexando un mismo valor hasta alcanzar una longitud dada.

- name: partition
  signature: "def partition(p: (A) ⇒ Boolean): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Partitions this collection in two collections according to a predicate.
    es: Parte esta colección en dos colecciones de acuerdo a un predicado.
  figures:
  - en: <code>partition</code> selects the elements that satisfy <var>p</var> on the first component of a tuple and the rest of elements on the second.
    es: <code>partition</code> selecciona los elementos que satisfacen <var>p</var> en la primera componente de una tupla y el resto de elementos en la segunda.

- name: patch
  signature: "def patch(from: Int, that: GenSeq[A], replaced: Int): <em>Collection</em>[A]"
  description:
    en: Produces a new collection where a slice of elements in this collection is replaced by another sequence.
    es: Produce una nueva colección donde una subcolección de elementos es reemplazada por otra secuencia.

- name: permutations
  signature: "def permutations: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over distinct permutations.
    es: Itera sobre distintas permutaciones.
  figures:
  - en: <code>permutations</code> returns an iterator over all possible permutations of a collection.
    es: <code>permutations</code> devuelve un iterador sobre todas las posibles permutaciones de esta colección.

- name: prefixLength
  signature: "def prefixLength(p: (A) ⇒ Boolean): Int"
  description:
    en: Returns the length of the longest prefix whose elements all satisfy some predicate.
    es: Devuelve la longitud del mayor prefijo cuyos elementos satisfacen algún predicado.
  figures:
  - en: <code>prefixLength</code> returns the length of the longest prefix whose elements satisfy <var>p</var>.
    es: <code>prefixLength</code> devuelve la longitud del mayor prefijo cuyos elementos satisfacen <var>p</var>.

- name: product
  signature: "def product: A"
  description:
    en: Multiplies up the elements of this collection.
    es: Multiplica los elementos de esta colección.
  figures:
  - en: <code>product</code> multiplies the elements of a collection.
    es: <code>product</code> multiplica los elementos de una colección.
  - en: <code>product</code> returns 1 on empty collections.
    es: <code>product</code> devuelve 1 en colecciones vacías.

- name: range
  signature: "def <em>Collection</em>.range(start: Int, end: Int, step: Int): <em>Collection</em>[Int]"
  description:
    en: Produces a collection containing a sequence of increasing of integers
    es: Produce una colección que contiene una secuencia de enteros incrementales.

- name: reduce
  signature: "def reduce[A1 >: A](op: (A1, A1) ⇒ A1): A1"
  description:
    en: Reduces the elements of this collection using the specified associative binary operator.
    es: Reduce los elementos de esta colección utilizando un operador binario asociativo.

- name: reduceLeft
  signature: "def reduceLeft[B >: A](op: (B, A) ⇒ B): B"
  description:
    en: Applies a binary operator to all elements of this collection, going left to right.
    es: Aplica un operador binario a todos los elementos de esta colección, yendo de izquierda a derecha.
  figures:
  - en: <code>reduceLeft</code> applies <code>op</code> to successive elements of a collection, going from left to right, starting with the two first elements.
    es: <code>reduceLeft</code> aplica <code>op</code> a elementos sucesivos de una colección, yendo de izquierda a derecha, empezando con los dos primeros elementos.
  - en: When a collection has a single element <code>reduceLeft</code> returns that element.
    es: Cuando una colección solo tiene un único elemento <code>reduceLeft</code> devuelve dicho elemento.
  - en: <code>reduceLeft</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>reduceLeft</code> throws <code>UnsupportedOperationException</code> en colecciones vacías.

- name: reduceLeftOption
  signature: "def reduceLeftOption[B >: A](op: (B, A) ⇒ B): Option[B]"
  description:
    en: Optionally applies a binary operator to all elements of this collection, going left to right.
    es: Opcionalmente aplica un operador binario a todos los elementos de esta colección, yendo de izquierda a derecha.
  figures:
  - en: <code>reduceLeftOption</code> applies <code>op</code> to successive elements of a collection going from left to right, starting with the two first elements and wrapping the final result with <code>Some</code>.
    es: <code>reduceLeftOption</code> aplica <code>op</code> a elementos sucesivos de una colección yendo de izquierda a derecha, empezando con los dos primeros elementos y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceLeftOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceLeftOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reduceOption
  signature: "def reduceOption[A1 >: A](op: (A1, A1) ⇒ A1): Option[A1]"
  description:
    en: Reduces the elements of this collection, if any, using the specified associative binary operator.
    es: Reduce los elementos de esta colección, si lo hubiese, utilizando un operador binario asociativo.
  figures:
  - en: <code>reduceLeftOption</code> applies <code>op</code> to all elements of a collection in a non-deterministic fashion and wrapping the final result with <code>Some</code>.
    es: <code>reduceLeftOption</code> aplica <code>op</code> a todos los element de una colección de forma no determinística y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reduceRight
  signature: "def reduceRight[B >: A](op: (A, B) ⇒ B): B"
  description:
    en: Applies a binary operator to all elements of this collection, going right to left.
    es: Aplica un operador binario a todos los elementos de esta colección, yendo de derecha a izquierda.
  figures:
  - en: <code>reduceRight</code> applies <code>op</code> to successive elements of a collection going from right to left, starting with the two last elements.
    es: <code>reduceRight</code> aplica <code>op</code> a elementos sucesivos de una colección yendo de derecha a izquierda, empezando con los dos últimos elementos.
  - en: When a collection has a single element <code>reduceRight</code> returns that element.
    es: Cuando una colección solo tiene un único elemento <code>reduceRight</code> devuelve dicho elemento.
  - en: <code>reduceRight</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>reduceRight</code> throws <code>UnsupportedOperationException</code> en colecciones vacías.

- name: reduceRightOption
  signature: "def reduceRightOption[B >: A](op: (A, B) ⇒ B): Option[B]"
  description:
    en: Optionally, applies a binary operator to all elements of this collection, going right to left.
    es: Opcionalmente aplica un operador binario a todos los elementos de esta colección, yendo de derecha a izquierda.
  figures:
  - en: <code>reduceRightOption</code> applies <code>op</code> to successive elements of a collection going from right to left, starting with the two last elements and wrapping the final result with <code>Some</code>.
    es: <code>reduceRightOption</code> aplica <code>op</code> a elementos sucesivos de una colección yendo de derecha a izquierda, empezando con los dos últimos elementos y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceRightOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceRightOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reverse
  signature: "def reverse: <em>Collection</em>[A]"
  description:
    en: Returns new collection with elements in reversed order.
    es: Devuelve una nueva colección con los elementos en orden inverso.
  figures:
  - en: <code>reverse</code> returns a new collection with elements in reversed order.
    es: <code>reverse</code> devuelve una nueva colección con los elementos en orden inverso.

- name: reverseMap
  signature: "def reverseMap(f: (A) ⇒ B): <em>Collection</em>[A]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection and collecting the results in reversed order.
    es: Construye una nueva colección aplicando una función a todos los elementos de esta colección y recopilando los resultados en orden inverso.
  figures:
  - en: <code>reverseMap</code> applies <var>f</var> to all elements and collects the values in reversed order.
    es: <code>reverseMap</code> aplica <var>f</var> a todos los elementos y recopila los valores en orden inverso.

- name: sameElements
  signature: "def sameElements(that: GenIterable[A]): Boolean"
  description:
    en: Checks if the other collection contains the same elements in the same order as this one.
    es: Comprueba si otra colección contiene los mismos elementos en el mismo orden que esta.

- name: scan
  signature: "def scan[B >: A](z: B)(op: (B, B) ⇒ B)"
  description:
    en: Computes a prefix scan of the elements of the collection.
    es: Computa un scan prefijado de los elementos de la colección.

- name: scanLeft
  signature: "def scanLeft[B](z: B)(op: (B, A) ⇒ B)"
  description:
    en: Produces a collection containing cumulative results of applying the operator going left to right.
    es: Produce una colección que contiene los resultados parciales de aplicar el operador, yendo de izquierda a derecha.

- name: scanRight
  signature: "def scanRight[B](z: B)(op: (A, B) ⇒ B)"
  description:
    en: Produces a collection containing cumulative results of applying the operator going right to left.
    es: Produce una colección que contiene los resultados parciales de aplicar el operador, yendo de derecha a izquierda.

- name: segmentLength
  signature: "def segmentLength(p: (A) ⇒ Boolean, from: Int): Int"
  description:
    en: Computes length of longest segment whose elements all satisfy some predicate.
    es: Computa la longitud del mayor segmento cuyos elementos satisfacen un predicado.
  figures:
  - en: <code>prefixLength</code> returns the length of the longest segment starting at <var>from</var> whose elements satisfy <var>p</var>.
    es: <code>prefixLength</code> devuelve la longitud del mayor segmento empezando por <var>from</var> cuyos elementos satisfacen <var>p</var>.

- name: size
  signature: "def size: Int"
  description:
    en: The size of this collection.
    es: El tamaño de esta colección.

- name: slice
  signature: "def slice(from: Int, until: Int): <em>Collection</em>[A]"
  description:
    en:
    es:

- name: sliding
  signature: "def sliding(size: Int, step: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Groups elements in fixed size blocks by passing a "sliding window" over them.
    es: Agrupa elementos en bloques de tamaño fijo pasando una "ventana deslizante" sobre ellos.

- name: sortBy
  signature: "def sortBy[B](f: (A) ⇒ B)(implicit ord: math.Ordering[B]): <em>Collection</em>[A]"
  description:
    en: Sorts this collection according to the Ordering which results from transforming an implicitly given Ordering with a transformation function.
    es: Ordena esta colección de acuerdo al Ordering resultado de transformar un Ordering dado implícitamente con una función de transformación.

- name: sortWith
  signature: "def sortWith(lt: (A, A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Sorts this collection according to a comparison function.
    es: Ordena esta colección de acuerdo a una función de comparación.

- name: sorted
  signature: "def sorted[B >: A]"
  description:
    en: Sorts this collection according to an Ordering.
    es: Ordena esta colección de acuerdo a un Ordering.

- name: span
  signature: "def span(p: (A) ⇒ Boolean): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Splits this collection into a prefix/suffix pair according to a predicate.
    es: Parte esta colección en un par prefijo/sufijo de acuerdo a un predicado.

- name: splitAt
  signature: "def splitAt(n: Int): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Splits this collection into two at a given position.
    es: Parte esta colección en dos en una posición dada.

- name: startsWith
  signature: "def startsWith[B](that: GenSeq[B], offset: Int): Boolean"
  description:
    en: Tests whether this collection contains the given sequence at a given index.
    es: Comprueba si esta colección contiene la secuencia dada en un índice en particular.

- name: sum
  signature: "def sum: A"
  description:
    en: Sums up the elements of this collection.
    es: Suma los elementos de esta colección.
  figures:
  - en: <code>sum</code> sums the elements of a collection.
    es: <code>sum</code> suma los elementos de una colección.
  - en: <code>sum</code> returns 0 on empty collections.
    es: <code>sum</code> devuelve 0 en colecciones vacías.

- name: tabulate
  signature: "def <em>Collection</em>.tabulate[A](n<sub>1</sub>: Int, ..., n<sub>m</sub>: Int)(f: (Int, ..., Int): ⇒ A): <em>Collection</em>[... <em>Collection</em>[A] ...]"
  description:
    en: Produces a n-dimensional collection containing values of a given function over ranges of integer values starting from 0.
    es: Produce una colección n-dimensional que contiene los valores de una cierta función sobre el rango de valores enteros empezando por 0.

- name: tail
  signature: "def tail: <em>Collection</em>[A]"
  description:
    en: Selects all elements except the first.
    es: Selecciona todos los elementos excepto el primero.
  figures:
  - en: <code>tail</code> returns all but the first element of a collection.
    es: <code>tail</code> devuelve todos excepto el primer elemento de una colección.
  - en: When a collection has a single element <code>tail</code> returns an empty collection.
    es: Cuando una colección solo tiene un único elemento <code>tail</code> devuelve una colección vacía.
  - en: <code>tail</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>tail</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: tails
  signature: "def tails: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over the tails of this collection.
    es: Itera sobre las colas de esta colección.

- name: take
  signature: "def take(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects first <var>n</var> elements.
    es: Selecciona los primeros <var>n</var> elementos.

- name: takeRight
  signature: "def takeRight(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects last <var>n</var> elements.
    es: Selecciona los últimos <var>n</var> elementos.

- name: takeWhile
  signature: "def takeWhile(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Takes longest prefix of elements that satisfy a predicate.
    es: Toma el mayor prefijo de elementos que satisfacen un predicado.

- name: union
  signature: "def union(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Produces a new collection which contains all elements of this one and also all elements of a given sequence.
    es: Produce una nueva colección que contiene todos los elementos de esta y los de otra secuencia.

- name: unzip
  signature: "def unzip[A1, A2](implicit asPair: (A) ⇒ (A1, A2)): (<em>Collection</em>[A1], <em>Collection</em>[A2])"
  description:
    en: Converts this collection of pairs into two collections of the first and second half of each pair.
    es: Convierte esta colección de pares en dos colecciones, una compuesta por el primer miembro y otra por el segundo.

- name: unzip3
  signature: "def unzip3[A1, A2, A3](implicit asTriple: (A) ⇒ (A1, A2, A3)): (<em>Collection</em>[A1], <em>Collection</em>[A2], <em>Collection</em>[A3])"
  description:
    en: Converts this collection of triples into three collections of the first, second, and third element of each triple.
    es: Convierte esta colección de ternas en tres colecciones del primer, segundo y tercer elemento de cada terna.

- name: updated
  signature: "def updated(index: Int, elem: A): <em>Collection</em>[A]"
  description:
    en: A copy of this collection with one single replaced element.
    es: Una copia de esta colección con un único elemento reemplazado.

- name: values
  signature: "def values: Iterable[V]"
  description:
    en: Collects all values of this map in an iterable collection.
    es: Recopila todos los valores de este mapa en una coleccion iterable.

- name: withDefault
  signature: "def withDefault[V1 >: V](f<sub>def</sub>: (K) ⇒ V1): Map[K, V1]"
  description:
    en: The same map with a given default function.
    es: El mismo mapa con una función predeterminada dado.

- name: withDefaultValue
  signature: "def withDefaultValue[V1 >: V](v<sub>def</sub>: V1): Map[K, V1]"
  description:
    en: The same map with a given default value.
    es: El mismo mapa con un valor predeterminado dado.

- name: zip
  signature: "def zip[B](that: GenIterable[B]): <em>Collection</em>[A, B]"
  description:
    en: Returns a collection formed from this and another one by combining corresponding elements in pairs.
    es: Devuelve una colección formada por los elementos de dos colecciones distintas combinados en parejas.

- name: zipAll
  signature: "def zipAll[B](that: Iterable[B], thisElem: A, thatElem: B): <em>Collection</em>[(A, B)]"
  description:
    en:
      Returns a collection formed from this and another one by combining corresponding elements in pairs.
      If one of the two collections is shorter than the other, placeholder elements are used to extend the shorter collection to the length of the longer.
    es:
      Devuelve una colección formada por los elementos de dos colecciones distintas combinados en parejas.
      Si una de las colecciones es menor que la otra, se usan elementos comodín en la más corta hasta alcanzar la longitud de la más larga.

- name: zipWithIndex
  signature: "def zipWithIndex: <em>Collection</em>[A, Int]"
  description:
    en: Zips this collection with its indices.
    es: Combina cada elemento de esta colección con su índice.
