---
- name: aggregate
  signature: "def aggregate[B](z: ⇒ B)(seqop: (B, A) ⇒ B, combop: (B, B) ⇒ B): B"
  description:
    en: Aggregates the results of applying an operator to subsequent elements.
    es: Agrega los resultados de aplicar un operador a elementos subsecuentes.
  figures:
  - en: <code>aggregate</code> applies <var>seqop</var> to adjacent elements and then combines these results with <code>combop</code>.
    es: <code>aggregate</code> aplica <var>seqop</var> a elementos adyacentes y luego combina estos resultados con <code>combop</code>.
  - en: <code>aggregate</code> returns <var>z</var> on empty collections.
    es: <code>aggregate</code> devuelve <var>z</var> en colecciones vacías.

- name: collect
  signature: "def collect[B](pf: PartialFunction[A, B]): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a partial function to all elements of this collection on which the function is defined.
    es: Construye una nueva colección aplicando una función parcial a todos los elementos de esta colección para los que dicha función está definida.
  figures:
  - en: <code>collect</code> applies <code>pf</code> only to those elements on which <code>pf</code> is defined.
    es: <code>collect</code> aplica <code>pf</code> sólo a aquellos elementos para los que <code>pf</code> está definida.

- name: collectFirst
  signature: "def collectFirst[B](pf: PartialFunction[A, B]): Option[B]"
  description:
    en: Finds the first element of the collection on which the given partial function is defined, and applies the partial function to it.
    es: Encuentra el primer elemento de la colección para el cual está definida una función parcial, aplicando después dicha función parcial.
  figures:
  - en: <code>collectFirst</code> wraps with <code>Some</code> the result of applying <code>pf</code> on the first element on which <code>pf</code> is defined.
    es: <code>collectFirst</code> envuelve con <code>Some</code> el resultado de aplicar <code>pf</code> al primer elemento para el que <code>pf</code> está definida.
  - en: <code>collectFirst</code> returns <code>None</code> when <code>pf</code> is defined for no element.
    es: <code>collectFirst</code> devuelve <code>None</code> cuando <code>pf</code> no está definida para ningún elemento.

- name: combinations
  signature: "def combinations(n: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over combinations.
    es: Itera sobre combinaciones.
  figures:
  - en: <code>combinations</code> finds all possible combinations taking <var>n</var> elements at time and provides an iterator to go through them.
    es: <code>combinations</code> encuentra todas las posibles combinaciones tomando <var>n</var> elementos cada vez y proporciona un iterador para recorrerlos.

- name: concat
  signature: "def <em>Collection</em>.concat(xss: Traversable[A]*): <em>Collection</em>[A]"
  description:
    en: Concatenates all argument collections into a single collection.
    es: Concatena todas las colecciones argumento en una única colección.
  figures:
  - en: <code>concat</code> concatenates all collection elements into a single collection.
    es: <code>concat</code> concatena los elementos de todas las colecciones en una única colección.

- name: contains
  signature: "def contains[A1 >: A](elem: A1): Boolean"
  description:
    en: Tests whether this collection contains a given value as an element.
    es: Comprueba si esta colección contiene un valor dado en forma de elemento.
  figures:
  - en: <code>contains</code> returns <code>true</code> when at least one element in the collection is equal to <var>elem</var>.
    es: <code>contains</code> devuelve <code>true</code> cuando al menos un elemento de la colección es igual a <var>elem</var>.
  - en: <code>contains</code> returns <code>false</code> when the collection contains no element equal to <var>elem</var>.
    es: <code>contains</code> devuelve <code>false</code> cuando la colección no contiene ningún elemento igual a <var>elem</var>.

- name: containsSlice
  signature: "def containsSlice[B](that: GenSeq[B]): Boolean"
  description:
    en: Tests whether this collection contains a given sequence as a slice.
    es: Comprueba si esta colección contiene una secuencia dada en forma de subcolección.
  figures:
  - en: <code>containsSlice</code> returns <code>true</code> when <var>that</var> can be found at least once as subsequence of the collection.
    es: <code>containsSlice</code> devuelve <code>true</code> cuando <var>that</var> puede ser encontrada como subsecuencia de la colección al menos una vez.

- name: count
  signature: "def count(p: (A) ⇒ Boolean): Int"
  description:
    en: Counts the number of elements in the collection which satisfy a predicate.
    es: Cuenta el número de elementos en la colección que satisfacen un predicado.
  figures:
  - en: <code>count</code> counts how many elements satisfy <code>p</code>.
    es: <code>count</code> cuenta cuántos elementos satisfacen <code>p</code>.

- name: diff
  signature: "def diff(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Computes the multiset difference between this and another collection.
    es: Calcula la diferencia multiconjunto entre esta colección y otra.
  figures:
  - en: <code>diff</code> discards elements from the collection that are present in <var>that</var>.
    es: <code>diff</code> descarta los elementos de la colección que están presentes en <var>that</var>.

- name: distinct
  signature: "def distinct: <em>Collection</em>[A]"
  description:
    en: Builds a new collection from this one without any duplicate elements.
    es: Construye una nueva colección a partir de esta sin ningún elemento duplicado.
  figures:
  - en: <code>distinct</code> discards duplicated elements.
    es: <code>distinct</code> descarta elementos duplicados.

- name: drop
  signature: "def drop(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects all elements except the first <var>n</var> ones.
    es: Selecciona todos los elementos excepto los <var>n</var> primeros.
  figures:
  - en: <code>drop</code> discards the first <var>n</var> elements.

- name: dropRight
  signature: "def dropRight(n: Int): <em>Collection</em>[A]"
  description:
    en: Select all elements except last <var>n</var> ones.
    es: Selecciona todos los elementos excepto los <var>n</var> últimos.
  figures:
  - en: <code>dropRight</code> discards the last <var>n</var> elements.
    es: <code>dropRight</code> descarta los últimos <var>n</var> elementos.

- name: dropWhile
  signature: "def dropWhile(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Drops longest prefix of elements that satisfy a predicate.
    es: Descarta el mayor prefijo de elementos que satisfacen un predicado.
  figures:
  - en: <code>dropWhile</code> discards elements while they satisfy <code>p</code>.
    es: <code>dropWhile</code> descarta elementos mientras satisfacen <code>p</code>.

- name: endsWith
  signature: "def endsWith[B](that: GenSeq[B]): Boolean"
  description:
    en: Tests whether this collection ends with the given sequence.
    es: Comprueba si esta colección termina con una secuencia dada.
  figures:
  - en: <code>endsWith</code> returns <code>false</code> when <var>that</var> is not suffix of the collection.
    es: <code>endsWith</code> devuelve <code>false</code> cuando <var>that</var> no es sufijo de la colección.
  - en: <code>endsWith</code> returns <code>true</code> when <var>that</var> is suffix of the collection.
    es: <code>endsWith</code> devuelve <code>true</code> cuando <var>that</var> es sufijo de la colección.

- name: exists
  signature: "def exists(p: (A) ⇒ Boolean): Boolean"
  description:
    en: Tests whether a predicate holds for at least one element of this collection.
    es: Comprueba si un predicado es válido para al menos un elemento de esta colección.
  figures:
  - en: <code>exists</code> returns <code>true</code> when the collection contains at least one element that satisfy <code>p</code>.
    es: <code>exists</code> devuelve <code>true</code> cuando la colección contiene al menos un elemento que satisface <code>p</code>.
  - en: <code>exists</code> returns <code>false</code> when no element in the collection satisfies <code>p</code>.
    es: <code>exists</code> devuelve <code>false</code> cuando ningún elemento en la colección satisface <code>p</code>.

- name: fill
  signature: "def <em>Collection</em>.fill[A](n<sub>1</sub>: Int, ..., n<sub>m</sub>: Int)(elem: ⇒ A): <em>Collection</em>[... <em>Collection</em>[A] ...]"
  description:
    en: Produces a n-dimensional collection containing the results of some element computation a number of times.
    es: Produce la colección n-dimensional que contiene el resultado de cierta computación para un elemento un numero de veces.
  figures:
  - en: <code>fill</code> produces a n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional collection using <var>elem</var> as element.
    es: <code>fill</code> produce la colección n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional utilizando <var>elem</var> como elemento.

- name: filter
  signature: "def filter(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Selects all elements of this traversable collection which satisfy a predicate.
    es: Selecciona todos los elementos de la colección que satisfacen un predicado.
  figures:
  - en: <code>filter</code> preserves only those elements that satisfy <code>p</code>.
    es: <code>filter</code> conserva solo aquellos elementos que satisfacen <code>p</code>.

- name: filterKeys
  signature: "def filterKeys(p: (K) ⇒ Boolean): Map[K, V]"
  description:
    en: Filters this map by retaining only keys satisfying a predicate.
    es: Filtra esta mapa reteniendo solo las claves que satisfacen un predicado.
  figures:
  - en: <code>filterKeys</code> preserves only those elements whose key satisfies <code>p</code>.
    es: <code>filterKeys</code> conserva solo aquellos elementos cuya clave satisface <code>p</code>.

- name: filterNot
  signature: "def filterNot(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Selects all elements of this collection which do not satisfy a predicate.
    es: Selecciona todos los elementos de la colección que no satisfacen un predicado.
  figures:
  - en: <code>filterNot</code> preserves only those elements that does not satisfy <code>p</code>.
    es: <code>filterNot</code> conserva solo aquellos elementos que no satisfacen <code>p</code>.

- name: find
  signature: "def find(p: (A) ⇒ Boolean): Option[A]"
  description:
    en: Finds the first element of the collection satisfying a predicate, if any.
    es: Encuentra el primer elemento de la colección que satisface un predicado, si es que existe.
  figures:
  - en: <code>find</code> wraps with <code>Some</code> the first element that satisfies <code>p</code>.
    es: <code>find</code> envuelve con <code>Some</code> el primer elemento que satisface <code>p</code>.
  - en: If no element in the collection satisfies <code>p</code> then <code>find</code> returns <code>None</code>.
    es: Si ningún elemento de la colección satisface <code>p</code> entonces <code>find</code> devuelve <code>None</code>.

- name: flatMap
  signature: "def flatMap[B](f: (A) ⇒ <em>Collection</em>[B]): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection and using the elements of the resulting collections.
    es: Construye una nueva colección tras aplicar una función a todos los elementos de esta colección. La función devuelve la colección de elementos.
  figures:
  - en: <code>flapMap</code> applies <code>f</code> to each element and builds a new collection with the resulting subcollections's values.
    es: <code>flapMap</code> aplica <code>f</code> a cada elemento y construye una nueva colección con los valores de la subcolecciones resultantes.

- name: flatten
  signature: "def flatten[B]: <em>Collection</em>[B]"
  description:
    en: Converts this collection of collections into the collection formed by the elements of the inner collections.
    es: Convierte esta colección de colecciones en la colección compuesta por los elementos de las colecciones internas.
  figures:
  - en: <code>flatten</code> builds a new collection with the subcollections' values.
    es: <code>flatten</code> construye una nueva colección con los valores de las subcolecciones.

- name: fold
  signature: "def fold[A1 >: A](z: A1)(op: (A1, A1) ⇒ A1): A1"
  description:
    en: Folds the elements of this collection using the specified associative binary operator.
    es: Pliega los elementos de esta colección utilizando un operador binario asociativo.
  figures:
  - en: <code>fold</code> applies <code>op</code> to all elements of the collection in a nondeterministic fashion using <var>z</var> as the <var>op</var>'s neutral element.
    es: <code>fold</code> aplica <code>op</code> a todos los element de la colección de forma no determinística utilizando <var>z</var> como elemento neutral de <var>op</var>'s neutral.

- name: foldLeft
  signature: "def foldLeft[B](z: B)(op: (B, A) ⇒ B): B"
  description:
    en: Applies a binary operator to a start value and all elements of this collection, going left to right.
    es: Aplica un operador binario a un valor inicial y a todos los elementos de la colección, yendo de izquierda a derecha.
  figures:
  - en: <code>foldLeft</code> applies <code>op</code> to all elements of the collection going from left to right and using <var>z</var> in the first <var>op</var> application.
    es: <code>foldLeft</code> aplica <code>op</code> a todos los element de la colección yendo de izquierda a derecha y utilizando <var>z</var> en la primera aplicación de <var>op</var>.
  - en: When the collection is empty <code>foldLeft</code> returns the <var>z</var> parameter.
    es: Cuando la colección es vacía <code>foldLeft</code> devuelve el parámetro <var>z</var>.

- name: foldRight
  signature: "def foldRight[B](z: B)(op: (A, B) ⇒ B): B"
  description:
    en: Applies a binary operator to a start value and all elements of this collection, going right to left.
    es: Aplica un operador binario a un valor inicial y a todos los elementos de la colección, yendo de derecha a izquierda.
  figures:
  - en: <code>foldRight</code> applies <code>op</code> to all elements of the collection going from right to left and using <var>z</var> in the first <var>op</var> application.
    es: <code>foldRight</code> aplica <code>op</code> a todos los element de la colección yendo de derecha a izquierda y utilizando <var>z</var> en la primera aplicación de <var>op</var>.
  - en: When the collection is empty <code>foldRight</code> returns the <var>z</var> parameter.
    es: Cuando la colección es vacía <code>foldRight</code> devuelve el parámetro <var>z</var>.

- name: forall
  signature: "def forall(p: (A) ⇒ Boolean): Boolean"
  description:
    en: Tests whether a predicate holds for all elements of this collection.
    es: Comprueba si un predicado es válido para todos los elementos de esta colección.
  figures:
  - en: <code>forall</code> returns <code>false</code> when the collection contains at least one element that does not satisfy <code>p</code>.
    es: <code>forall</code> devuelve <code>false</code> cuando la colección contiene al menos un elemento que no satisface <code>p</code>.
  - en: <code>forall</code> returns <code>true</code> when all elements in the collection satisfy <code>p</code>.
    es: <code>forall</code> devuelve <code>true</code> cuando todos los elementos en la colección satisfacen <code>p</code>.

- name: foreach
  signature: "def foreach(f: (A) ⇒ Unit): Unit"
  description:
    en: Applies a function <var>f</var> to all elements of this collection.
    es: Aplica una función <var>f</var> a todos los elementos de esta colección.
  figures:
  - en: <code>foreach</code> applies <code>f</code> to each element of the collection.
    es: <code>foreach</code> aplica <code>f</code> a cada elemento de la colección.

- name: getOrElse
  signature: "def getOrElse(key: K, default: ⇒ V): V"
  description:
    en: Returns the value associated with a key, or a default value if the key is not contained in the map.
    es: Devuelve el valor asociado a una clavo o un valor predeterminado si el mapa no contiene dicha clave.
  figures:
  - en: <code>getOrElse</code> returns <var>default</var> when the map does not contain <var>key</var>.
    es: <code>getOrElse</code> devuelve <var>default</var> cuando el mapa no contiene la clave <var>key</var>.

- name: groupBy
  signature: "def groupBy[K](f: (A) ⇒ K): Map[K, <em>Collection</em>[A]]"
  description:
    en: Partitions this collection into a map of collections according to some discriminator function.
    es: Parte esta colección en un mapa de colecciones de acuerdo a una función discriminadora.
  figures:
  - en: <code>groupBy</code> applies <code>f</code> to each element to find out with which key this element should be grouped.
    es: <code>groupBy</code> aplica <code>f</code> a cada elemento para saber con qué clave debe de ser agrupado este elemento.

- name: grouped
  signature: "def grouped(size: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Partitions elements in fixed size iterable collections.
    es: Parte los elementos en colecciones iterables de tamaño fijo.
  figures:
  - en: <code>grouped</code> splits the collection in groups of <var>size</var> elements ready to be iterated.
    es: <code>grouped</code> parte la colección en grupos de <var>size</var> elementos listos para ser iterados.

- name: head
  signature: "def head: A"
  description:
    en: Selects the first element of this collection.
    es: Selecciona el primer elemento de esta colección.
  figures:
  - en: <code>head</code> returns the first element of the collection.
    es: <code>head</code> devuelve el primer elemento de la colección.
  - en: If the collection has a single element then <code>head</code> returns that element.
    es: Si la colección solo tiene un único elemento entonces <code>head</code> devuelve dicho elemento.
  - en: <code>head</code> throws <code>NoSuchElementException</code> on empty collections.
    es: <code>head</code> lanza <code>NoSuchElementException</code> en colecciones vacías.

- name: headOption
  signature: "def headOption: Option[A]"
  description:
    en: Optionally selects the first element.
    es: Opcionalmente selecciona el primer elemento de esta colección.
  figures:
  - en: <code>headOption</code> wraps with <code>Some</code> the first element of the collection.
    es: <code>headOption</code> envuelve con <code>Some</code> el primer elemento de la colección.
  - en: <code>headOption</code> returns <code>None</code> on empty collections.
    es: <code>headOption</code> devuelve <code>None</code> en colecciones vacías.

- name: indexOf
  signature: "def indexOf(elem: A, from: Int): Int"
  description:
    en: Finds index of first occurrence of some value in this collection after or at some start index.
    es: Encuentra el índice de la primera ocurrencia de algún valor en esta colección empezando por un índice inicial.
  figures:
  - en: <code>indexOf</code> returns the index of the first element at <var>from</var> or after that is equal to <var>elem</var>.
    es: <code>indexOf</code> devuelve el índice del primer elemento en o después de <var>from</var> que es igual a <var>elem</var>.
  - en: If the collection does not contain any element at or after <var>from</var> that is equal to <var>elem</var> then <code>indexOf</code> returns -1.
    es: Si la colección no contiene ningún elemento en o después de <var>from</var> que es igual a <var>elem</var> entonces <code>indexOf</code> devuelve -1.

- name: indexOfSlice
  signature: "def indexOfSlice[B >: A](that: GenSeq[B], from: Int): Int"
  description:
    en: Finds first index after or at a start index where this collection contains a given sequence as a slice.
    es: Encuentra el primer índice empezando por uno inicial donde esta colección contiene una secuencia dada como subcolección.
  figures:
  - en: <code>indexOfSlice</code> returns the index of the first occurrence at or after <var>from</var> where <var>that</var> can be found as subsequence of the collection.
    es: <code>indexOfSlice</code> devuelve el índice de la primera ocurrencia en o después de <var>from</var> donde <var>that</var> puede ser encontrada como subsecuencia de la colección.

- name: indexWhere
  signature: "def indexWhere(p: (A) ⇒ Boolean, from: Int): Int"
  description:
    en: Finds index of the first element satisfying some predicate after or at some start index.
    es: Encuentra el índice el primer elemento que satisface un predicado empezando por un índice inicial.
  figures:
  - en: <code>indexWhere</code> returns the index of the first element at or after <var>from</var> that satisfies <var>p</var>.
    es: <code>indexWhere</code> devuelve el índice del primer elemento en o después de <var>from</var> que satisface <var>p</var>.
  - en: If the collection does not contain any element at or after <var>from</var> that satisfies <var>p</var> then <code>indexWhere</code> returns -1.
    es: Si la colección no contiene ningún elemento en o después de <var>from</var> que satisface <var>p</var> entonces <code>indexWhere</code> devuelve -1.

- name: indices
  signature: "def indices: Range"
  description:
    en: Produces the range of all indices of this collection.
    es: Produce un rango con todos los índices de esta colección.
  figures:
  - en: <code>indices</code> returns a zero-based range with the indices of the collection.
    es: <code>indices</code> devuelve un rango de base cero con los índices de la colección.

- name: init
  signature: "def init: <em>Collection</em>[A]"
  description:
    en: Select all elements except the last.
    es: Selecciona todos los elementos excepto el último.
  figures:
  - en: <code>init</code> returns all but the last element of the collection.
    es: <code>init</code> devuelve todos excepto el último elemento de la colección.
  - en: When the collection has a single element <code>init</code> returns an empty collection.
    es: Cuando la colección solo tiene un único elemento <code>init</code> devuelve la colección vacía.
  - en: <code>init</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>init</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: inits
  signature: "def inits: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over the inits of this collection.
    es: Itera sobre los <code>inits</code> de esta colección.
  figures:
  - en: <code>inits</code> finds all the possible prefixes of the collection and provides an iterator to go through them.
    es: <code>inits</code> encuentra todos los prefijos posibles de la colección y proporciona un iterador para recorrerlos.

- name: intersect
  signature: "def intersect(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Computes the multiset intersection between this collection and another sequence.
    es: Computa la intersección multiconjunto entre esta colección y otra secuencia.
  figures:
  - en: <code>intersect</code> finds the elements that the collection and <var>that</var> have in common.
    es: <code>intersect</code> encuentra los elementos que tienen en común la colección y <var>that</var>.

- name: isEmpty
  signature: "def isEmpty: Boolean"
  description:
    en: Tests whether this collection is empty.
    es: Comprueba si esta colección está vacía.
  figures:
  - en: <code>isEmpty</code> returns <code>false</code> when the collection has at least one element.
    es: <code>isEmpty</code> devuelve <code>false</code> cuando la colección tiene al menos un elemento.
  - en: <code>isEmpty</code> returns <code>true</code> when the collection has no elements.
    es: <code>isEmpty</code> devuelve <code>true</code> cuando la colección no tiene elementos.

- name: keys
  signature: "def keys: Iterable[K]"
  description:
    en: Collects all keys of this map in an iterable collection.
    es: Recopila todas las claves de este mapa en una coleccion iterable.
  figures:
  - en: <code>keys</code> returns an iterator to go through a map's keys.
    es: <code>keys</code> devuelve un iterador para recorrer las claves de un mapa.

- name: last
  signature: "def last: A"
  description:
    en: Selects the last element.
    es: Selecciona el último elemento.
  figures:
  - en: <code>last</code> returns the last element of the collection.
    es: <code>last</code> devuelve el último elemento de la colección.
  - en: If the collection has a single element then <code>last</code> returns that element.
    es: Si la colección solo tiene un único elemento entonces <code>last</code> devuelve dicho elemento.
  - en: <code>last</code> throws <code>NoSuchElementException</code> on empty collections.
    es: <code>last</code> lanza <code>NoSuchElementException</code> en colecciones vacías.

- name: lastIndexOf
  signature: "def lastIndexOf(elem: A, end: Int): Int"
  description:
    en: Finds index of last occurrence of some value in this colección before or at a given end index.
    es: Encuentra el índice de la última ocurrencia de algún valor en esta colección antes de un índice en particular.
  figures:
  - en: <code>lastIndexOf</code> returns the index of the last element, before or at <var>end</var>, that is equal to <var>elem</var>.
    es: <code>lastIndexOf</code> devuelve el índice del último elemento, antes de o en <var>end</var>, que es igual a <var>elem</var>.

- name: lastIndexOfSlice
  signature: "def lastIndexOfSlice[B >: A](that: GenSeq[B], end: Int): Int"
  description:
    en: Finds last index before or at a given end index where this collection contains a given sequence as a slice.
    es: Encuentra el último índice antes de uno en particular donde esta colección contiene una secuencia dada como subcolección.
  figures:
  - en: <code>lastIndexOfSlice</code> returns the index of the last occurrence at or before <var>from</var> where <var>that</var> can be found as subsequence of the collection.
    es: <code>lastIndexOfSlice</code> devuelve el índice de la última ocurrencia en o antes de <var>from</var> donde <var>that</var> puede ser encontrada como subsecuencia de la colección.

- name: lastIndexWhere
  signature: "def lastIndexWhere(p: (A) ⇒ Boolean, end: Int): Int"
  description:
    en: Finds index of last element satisfying some predicate before or at a given end index.
    es: Encuentra el índice del último elemento que satisface algún predicado antes de un índice en particular.
  figures:
  - en: <code>lastIndexWhere</code> returns the index of the last element, before or at <var>end</var>, that satisfies <var>p</var>.
    es: <code>lastIndexWhere</code> devuelve el índice del último elemento, antes de o en <var>end</var>, que satisface <var>p</var>.

- name: lastOption
  signature: "def lastOption: Option[A]"
  description:
    en: Optionally selects the last element.
    es: Opcionalmente selecciona el último elemento.
  figures:
  - en: <code>lastOption</code> wraps with <code>Some</code> the last element of the collection.
    es: <code>lastOption</code> envuelve con <code>Some</code> el último elemento de la colección.
  - en: <code>lastOption</code> returns <code>None</code> on empty collections.
    es: <code>lastOption</code> devuelve <code>None</code> en colecciones vacías.

- name: length
  signature: "def length: Int"
  description:
    en: The length of the collection.
    es: La longitud de la colección.
  figures:
  - en: <code>length</code> returns how many elements the collection has.
    es: <code>length</code> devuelve cuántos elementos tiene la colección.

- name: map
  signature: "def map[B](f: (A) ⇒ B): <em>Collection</em>[B]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection.
    es: Construye una nueva colección aplicando una función a todos los elementos de esta colección.
  figures:
  - en: <code>map</code> applies <code>f</code> to each element in the collection and builds a new collection with the results.
    es: <code>map</code> aplica <code>f</code> a cada elemento de la colección y construye una nueva colección con los resultados.

- name: mapConserve
  signature: "def mapConserve(f: (A) ⇒ A): <em>Collection</em>[A]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection assuring that the types are preserved.
    es: Construye una nueva colección aplicando una función a todos los elementos de esta colección asegurando que se mantienen los tipos.
  figures:
  - en: <code>mapConserve</code> applies <code>f</code> to each element in the collection and builds a new collection with the results, while preserving the original types.
    es: <code>mapConserve</code> aplica <code>f</code> a cada elemento de la colección y construye una nueva colección con los resultados, mientras mantiene el tipo original.

- name: mapValues
  signature: "def mapValues[W](f: (V) ⇒ W): Map[K, W]"
  description:
    en: Transforms this map by applying a function to every retrieved value.
    es: Transforma este mapa aplicando una función a cada valor.
  figures:
  - en: <code>mapValues</code> builds a new map preserving the keys but using the result of apply <code>f</code> to each value.
    es: <code>mapValues</code> construye un nuevo mapa conservando las claves pero utilizando el resultado de aplicar <code>f</code> a cada valor.

- name: max
  signature: "def max: A"
  description:
    en: Finds the largest element.
    es: Encuentra el mayor elemento.
  figures:
  - en: <code>max</code> finds the element with the largest value in the collection.
    es: <code>max</code> encuentra el elemento con mayor valor en la colección.
  - en: <code>max</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>max</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: maxBy
  signature: "def maxBy[B](f: (A) ⇒ B): A"
  description:
    en: Finds the first element which yields the largest value measured by function <var>f</var>.
    es: Encuentra el primer elemento que arroja el mayor valor medido por la función <var>f</var>.
  figures:
  - en: <code>maxBy</code> returns the element that, once applied <var>f</var>, yields the largest value.
    es: <code>maxBy</code> devuelve el elemento que, una vez aplicado <var>f</var> emite el mayor valor.
  - en: <code>maxBy</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>maxBy</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: min
  signature: "def min: A"
  description:
    en: Finds the smallest element.
    es: Encuentra el menor elemento.
  figures:
  - en: <code>min</code> finds the element with the smallest valut in the collection.
    es: <code>min</code> encuentra el elemento con menor valor en la colección.
  - en: <code>min</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>min</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: minBy
  signature: "def minBy[B](f: (A) ⇒ B): A"
  description:
    en: Finds the first element which yields the smallest value measured by function <var>f</var>.
    es: Encuentra el primer elemento que arroja el menor valor medido por la función <var>f</var>.
  figures:
  - en: <code>minBy</code> returns the element that, once applied <var>f</var>, yields the smallest value.
    es: <code>minBy</code> devuelve el elemento que, una vez aplicado <var>f</var> emite el menor valor.
  - en: <code>minBy</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>minBy</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: mkString
  signature: "def mkString(start: String, sep: String, end: String): String"
  description:
    en: Displays all elements of this collection in a string.
    es: Muestra todos los elementos de esta colección como una cadena.
  figures:
  - en: <code>mkString</code> builds an string delimited by <var>start</var> and <var>end</var> and using <var>sep</var> as separator.
    es: <code>mkString</code> construye una cadena delimitada por <var>start</var> y <var>end</var> y utilizando <var>sep</var> como separador.

- name: nonEmpty
  signature: "def nonEmpty: Boolean"
  description:
    en: Tests whether the collection is not empty.
    es: Comprueba si esta colección es no vacía.
  figures:
  - en: <code>nonEmpty</code> returns <code>true</code> when the collection has at least one element.
    es: <code>nonEmpty</code> devuelve <code>true</code> cuando la colección tiene al menos un elemento.
  - en: <code>nonEmpty</code> returns <code>false</code> when the collection has no elements.
    es: <code>nonEmpty</code> devuelve <code>false</code> cuando la colección no tiene elementos.

- name: padTo
  signature: "def padTo(len: Int, elem: A): <em>Collection</em>[A]"
  description:
    en: A copy of this collection with an element value appended until a given target length is reached.
    es: Una copia de esta colección anexando un mismo valor hasta alcanzar una longitud dada.
  figures:
  - en: <code>padTo</code> appends so many <var>elem</var> elements to the collection until reach some length.
    es: <code>padTo</code> añade tantos elementos <var>elem</var> a la colección hasta alcanzar cierta longitud.

- name: partition
  signature: "def partition(p: (A) ⇒ Boolean): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Partitions this collection in two collections according to a predicate.
    es: Parte esta colección en dos colecciones de acuerdo a un predicado.
  figures:
  - en: <code>partition</code> selects the elements that satisfy <var>p</var> on the first component of a tuple and the rest of elements on the second.
    es: <code>partition</code> selecciona los elementos que satisfacen <var>p</var> en la primera componente de una tupla y el resto de elementos en la segunda.

- name: patch
  signature: "def patch(from: Int, that: GenSeq[A], replaced: Int): <em>Collection</em>[A]"
  description:
    en: Produces a new collection where a slice of elements in this collection is replaced by another sequence.
    es: Produce una nueva colección donde una subcolección de elementos es reemplazada por otra secuencia.
  figures:
  - en: <code>patch</code> replaces the segment of elements that start at <var>from</var> and has length of <var>replace</var> by the elements of another collection.
    es: <code>patch</code> reemplaza el segmento de elementos que empieza en <var>from</var> y tiene longitud de <var>replace</var> por los elementos de otra colección.

- name: permutations
  signature: "def permutations: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over distinct permutations.
    es: Itera sobre distintas permutaciones.
  figures:
  - en: <code>permutations</code> returns an iterator to go through all possible permutations of the collection.
    es: <code>permutations</code> devuelve un iterador para recorrer todas las posibles permutaciones de esta colección.

- name: prefixLength
  signature: "def prefixLength(p: (A) ⇒ Boolean): Int"
  description:
    en: Returns the length of the longest prefix whose elements all satisfy some predicate.
    es: Devuelve la longitud del mayor prefijo cuyos elementos satisfacen algún predicado.
  figures:
  - en: <code>prefixLength</code> returns the length of the longest prefix whose elements satisfy <var>p</var>.
    es: <code>prefixLength</code> devuelve la longitud del mayor prefijo cuyos elementos satisfacen <var>p</var>.

- name: product
  signature: "def product: A"
  description:
    en: Multiplies up the elements of this collection.
    es: Multiplica los elementos de esta colección.
  figures:
  - en: <code>product</code> multiplies the elements of the collection.
    es: <code>product</code> multiplica los elementos de la colección.
  - en: <code>product</code> returns 1 on empty collections.
    es: <code>product</code> devuelve 1 en colecciones vacías.

- name: range
  signature: "def <em>Collection</em>.range(start: Int, end: Int, step: Int): <em>Collection</em>[Int]"
  description:
    en: Produces the collection containing a sequence of increasing of integers
    es: Produce la colección que contiene una secuencia de enteros incrementales.
  figures:
  - en: <code>range</code> produces the collection containing a increasing sequence of integers.
    es: <code>range</code> produce la colección que contiene una secuencia creciente de enteros.
    
- name: reduce
  signature: "def reduce[A1 >: A](op: (A1, A1) ⇒ A1): A1"
  description:
    en: Reduces the elements of this collection using the specified associative binary operator.
    es: Reduce los elementos de esta colección utilizando un operador binario asociativo.
  figures:
  - en: <code>reduce</code> applies <code>op</code> to all elements of the collection in a nondeterministic fashion.
    es: <code>reduce</code> aplica <code>op</code> a todos los element de la colección de forma no determinística.

- name: reduceLeft
  signature: "def reduceLeft[B >: A](op: (B, A) ⇒ B): B"
  description:
    en: Applies a binary operator to all elements of this collection, going left to right.
    es: Aplica un operador binario a todos los elementos de esta colección, yendo de izquierda a derecha.
  figures:
  - en: <code>reduceLeft</code> applies <code>op</code> to successive elements of the collection, going from left to right, starting with the two first elements.
    es: <code>reduceLeft</code> aplica <code>op</code> a elementos sucesivos de la colección, yendo de izquierda a derecha, empezando con los dos primeros elementos.
  - en: When the collection has a single element <code>reduceLeft</code> returns that element.
    es: Cuando la colección solo tiene un único elemento <code>reduceLeft</code> devuelve dicho elemento.
  - en: <code>reduceLeft</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>reduceLeft</code> throws <code>UnsupportedOperationException</code> en colecciones vacías.

- name: reduceLeftOption
  signature: "def reduceLeftOption[B >: A](op: (B, A) ⇒ B): Option[B]"
  description:
    en: Optionally applies a binary operator to all elements of this collection, going left to right.
    es: Opcionalmente aplica un operador binario a todos los elementos de esta colección, yendo de izquierda a derecha.
  figures:
  - en: <code>reduceLeftOption</code> applies <code>op</code> to successive elements of the collection going from left to right, starting with the two first elements and wrapping the final result with <code>Some</code>.
    es: <code>reduceLeftOption</code> aplica <code>op</code> a elementos sucesivos de la colección yendo de izquierda a derecha, empezando con los dos primeros elementos y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceLeftOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceLeftOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reduceOption
  signature: "def reduceOption[A1 >: A](op: (A1, A1) ⇒ A1): Option[A1]"
  description:
    en: Reduces the elements of this collection, if any, using the specified associative binary operator.
    es: Reduce los elementos de esta colección, si lo hubiese, utilizando un operador binario asociativo.
  figures:
  - en: <code>reduceOption</code> applies <code>op</code> to all elements of the collection in a nondeterministic fashion and wrapping the final result with <code>Some</code>.
    es: <code>reduceOption</code> aplica <code>op</code> a todos los element de la colección de forma no determinística y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reduceRight
  signature: "def reduceRight[B >: A](op: (A, B) ⇒ B): B"
  description:
    en: Applies a binary operator to all elements of this collection, going right to left.
    es: Aplica un operador binario a todos los elementos de esta colección, yendo de derecha a izquierda.
  figures:
  - en: <code>reduceRight</code> applies <code>op</code> to successive elements of the collection going from right to left, starting with the two last elements.
    es: <code>reduceRight</code> aplica <code>op</code> a elementos sucesivos de la colección yendo de derecha a izquierda, empezando con los dos últimos elementos.
  - en: When the collection has a single element <code>reduceRight</code> returns that element.
    es: Cuando la colección solo tiene un único elemento <code>reduceRight</code> devuelve dicho elemento.
  - en: <code>reduceRight</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>reduceRight</code> throws <code>UnsupportedOperationException</code> en colecciones vacías.

- name: reduceRightOption
  signature: "def reduceRightOption[B >: A](op: (A, B) ⇒ B): Option[B]"
  description:
    en: Optionally, applies a binary operator to all elements of this collection, going right to left.
    es: Opcionalmente aplica un operador binario a todos los elementos de esta colección, yendo de derecha a izquierda.
  figures:
  - en: <code>reduceRightOption</code> applies <code>op</code> to successive elements of the collection going from right to left, starting with the two last elements and wrapping the final result with <code>Some</code>.
    es: <code>reduceRightOption</code> aplica <code>op</code> a elementos sucesivos de la colección yendo de derecha a izquierda, empezando con los dos últimos elementos y envolviendo el resultado final con <code>Some</code>.
  - en: <code>reduceRightOption</code> returns <code>None</code> on empty collections.
    es: <code>reduceRightOption</code> devuelve <code>None</code> en colecciones vacías.

- name: reverse
  signature: "def reverse: <em>Collection</em>[A]"
  description:
    en: Returns new collection with elements in reversed order.
    es: Devuelve una nueva colección con los elementos en orden inverso.
  figures:
  - en: <code>reverse</code> returns a new collection with elements in reversed order.
    es: <code>reverse</code> devuelve una nueva colección con los elementos en orden inverso.

- name: reverseMap
  signature: "def reverseMap(f: (A) ⇒ B): <em>Collection</em>[A]"
  description:
    en: Builds a new collection by applying a function to all elements of this collection and collecting the results in reversed order.
    es: Construye una nueva colección aplicando una función a todos los elementos de esta colección y recopilando los resultados en orden inverso.
  figures:
  - en: <code>reverseMap</code> returns a new collection by applying <var>f</var> to all elements and collecting the values in reversed order.
    es: <code>reverseMap</code> devuelve una nueva colección aplicando <var>f</var> a todos los elementos y recopilando los valores en orden inverso.

- name: sameElements
  signature: "def sameElements(that: GenIterable[A]): Boolean"
  description:
    en: Checks if the other collection contains the same elements in the same order as this one.
    es: Comprueba si otra colección contiene los mismos elementos en el mismo orden que esta.
  figures:
  - en: <code>sameElements</code> returns <var>true</var> when the collection and <var>that</var> contain the same elements in the same order.
    es: <code>reverseMap</code> devuelve <var>true</var> cuando esta colección y <var>that</var> contienen los mismos elementos en el mismo orden.

- name: scan
  signature: "def scan[B >: A](z: B)(op: (B, B) ⇒ B)"
  description:
    en: Computes a prefix scan of the elements of the collection.
    es: Computa un scan prefijado de los elementos de la colección.

- name: scanLeft
  signature: "def scanLeft[B](z: B)(op: (B, A) ⇒ B)"
  description:
    en: Produces the collection containing cumulative results of applying the operator going left to right.
    es: Produce la colección que contiene los resultados parciales de aplicar el operador, yendo de izquierda a derecha.
  figures:
  - en: <code>scanLeft</code> applies <code>op</code> to all elements of the collection going from left to right, using <var>z</var> in the first <var>op</var> application and collecting the cumulative results.
    es: <code>scanLeft</code> aplica <code>op</code> a todos los element de la colección yendo de izquierda a derecha, utilizando <var>z</var> en la primera aplicación de <var>op</var> y recopilando los resultados acumulados.

- name: scanRight
  signature: "def scanRight[B](z: B)(op: (A, B) ⇒ B)"
  description:
    en: Produces the collection containing cumulative results of applying the operator going right to left.
    es: Produce la colección que contiene los resultados parciales de aplicar el operador, yendo de derecha a izquierda.
  figures:
  - en: <code>scanRight</code> applies <code>op</code> to all elements of the collection going from right to left, using <var>z</var> in the first <var>op</var> application and collecting the cumulative results.
    es: <code>scanRight</code> aplica <code>op</code> a todos los element de la colección yendo de derecha a izquierda, utilizando <var>z</var> en la primera aplicación de <var>op</var> y recopilando los resultados acumulados.

- name: segmentLength
  signature: "def segmentLength(p: (A) ⇒ Boolean, from: Int): Int"
  description:
    en: Computes length of longest segment whose elements all satisfy some predicate.
    es: Computa la longitud del mayor segmento cuyos elementos satisfacen un predicado.
  figures:
  - en: <code>segmentLength</code> returns the length of the longest segment starting at <var>from</var> whose elements satisfy <var>p</var>.
    es: <code>segmentLength</code> devuelve la longitud del mayor segmento empezando por <var>from</var> cuyos elementos satisfacen <var>p</var>.

- name: size
  signature: "def size: Int"
  description:
    en: The size of this collection.
    es: El tamaño de esta colección.
  figures:
  - en: <code>size</code> returns how many elements the collection has.
    es: <code>size</code> devuelve cuántos elementos tiene la colección.

- name: slice
  signature: "def slice(from: Int, until: Int): <em>Collection</em>[A]"
  description:
    en:
    es:
  figures:
  - en: <code>slice</code> extracts the segment that starts at the element immediately after <var>from</var> and ends at <var>until</var>.
    es: <code>slice</code> extrae el segmento que empieza en el elemento inmediatamente posterior a <var>from</var> y termina en <var>until</var>.

- name: sliding
  signature: "def sliding(size: Int, step: Int): Iterator[<em>Collection</em>[A]]"
  description:
    en: Groups elements in fixed size blocks by passing a "sliding window" over them.
    es: Agrupa elementos en bloques de tamaño fijo pasando una "ventana deslizante" sobre ellos.
  figures:
  - en: <code>sliding</code> extracts groups of elements of length <var>size</var> every <var>step</var> elements and provides an iterator to go through them.
    es: <code>sliding</code> extrae grupos de elementos de longitud <var>size</var> cada <var>step</var> elementos y proporciona un iterador para recorrerlos.

- name: sortBy
  signature: "def sortBy[B](f: (A) ⇒ B)(implicit ord: math.Ordering[B]): <em>Collection</em>[A]"
  description:
    en: Sorts this collection according to the Ordering which results from transforming an implicitly given Ordering with a transformation function.
    es: Ordena esta colección de acuerdo al Ordering resultado de transformar un Ordering dado implícitamente con una función de transformación.
  figures:
  - en: <code>sortBy</code> applies <var>f</var> to each element and uses the result as weight to sort the collection.
    es: <code>sortBy</code> aplica <var>f</var> a cada elemento y utiliza el resultado como peso para ordenar la colección.

- name: sortWith
  signature: "def sortWith(lt: (A, A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Sorts this collection according to a comparison function.
    es: Ordena esta colección de acuerdo a una función de comparación.
  figures:
  - en: <code>sortWith</code> sorts the collection using <var>lt</var> as comparison function of two elements.
    es: <code>sortWith</code> ordena la colección utilizando <var>lt</var> como función comparadora de dos elementos.

- name: sorted
  signature: "def sorted[B >: A]"
  description:
    en: Sorts this collection according to an Ordering.
    es: Ordena esta colección de acuerdo a un Ordering.
  figures:
  - en: <code>sorted</code> sorts the collection.
    es: <code>sorted</code> ordena la colección.

- name: span
  signature: "def span(p: (A) ⇒ Boolean): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Splits this collection into a prefix/suffix pair according to a predicate.
    es: Parte esta colección en un par prefijo/sufijo de acuerdo a un predicado.
  figures:
  - en: <code>span</code> selects the longest prefix of elements that satisfy <var>p</var> on the first component of a tuple and the rest of elements on the second.
    es: <code>span</code> selecciona el mayor prefijo de elementos que satisfacen <var>p</var> en la primera componente de una tupla y el resto de elementos en la segunda.

- name: splitAt
  signature: "def splitAt(i: Int): (<em>Collection</em>[A], <em>Collection</em>[A])"
  description:
    en: Splits this collection into two at a given position.
    es: Parte esta colección en dos en una posición dada.
  figures:
  - en: <code>splitAt</code> selects the elements at or before <var>i</var> on the first component of a tuple and the rest of elements on the second.
    es: <code>splitAt</code> selecciona los elementos en o antes de <var>i</var> en la primera componente de una tupla y el resto de elementos en la segunda.

- name: startsWith
  signature: "def startsWith[B](that: GenSeq[B], offset: Int): Boolean"
  description:
    en: Tests whether this collection contains the given sequence at a given index.
    es: Comprueba si esta colección contiene la secuencia dada en un índice en particular.
  figures:
  - en: <code>startsWith</code> returns <code>true</code> when <var>that</var> is prefix of the collection.
    es: <code>startsWith</code> devuelve <code>true</code> cuando <var>that</var> es prefijo de la colección.

- name: sum
  signature: "def sum: A"
  description:
    en: Sums up the elements of this collection.
    es: Suma los elementos de esta colección.
  figures:
  - en: <code>sum</code> sums the elements of the collection.
    es: <code>sum</code> suma los elementos de la colección.
  - en: <code>sum</code> returns 0 on empty collections.
    es: <code>sum</code> devuelve 0 en colecciones vacías.

- name: tabulate
  signature: "def <em>Collection</em>.tabulate[A](n<sub>1</sub>: Int, ..., n<sub>m</sub>: Int)(f: (Int, ..., Int): ⇒ A): <em>Collection</em>[... <em>Collection</em>[A] ...]"
  description:
    en: Produces a n-dimensional collection containing values of a given function over ranges of integer values starting from 0.
    es: Produce la colección n-dimensional que contiene los valores de una cierta función sobre el rango de valores enteros empezando por 0.
  figures:
  - en: <code>tabulate</code> produces a n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional collection using <var>f</var> to retrieve each element.
    es: <code>tabulate</code> produce la colección n<sub>1</sub> × n<sub>2</sub> × … × n<sub>m</sub> dimensional utilizando <var>f</var> para obtener cada elemento.

- name: tail
  signature: "def tail: <em>Collection</em>[A]"
  description:
    en: Selects all elements except the first.
    es: Selecciona todos los elementos excepto el primero.
  figures:
  - en: <code>tail</code> returns all but the first element of the collection.
    es: <code>tail</code> devuelve todos excepto el primer elemento de la colección.
  - en: When the collection has a single element <code>tail</code> returns an empty collection.
    es: Cuando la colección solo tiene un único elemento <code>tail</code> devuelve la colección vacía.
  - en: <code>tail</code> throws <code>UnsupportedOperationException</code> on empty collections.
    es: <code>tail</code> lanza <code>UnsupportedOperationException</code> en colecciones vacías.

- name: tails
  signature: "def tails: Iterator[<em>Collection</em>[A]]"
  description:
    en: Iterates over the tails of this collection.
    es: Itera sobre las colas de esta colección.
  figures:
  - en: <code>tails</code> finds all the possible suffixes of the collection and provides an iterator to go through them.
    es: <code>tails</code> encuentra todos los sufijos posibles de la colección y proporciona un iterador para recorrerlos.

- name: take
  signature: "def take(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects first <var>n</var> elements.
    es: Selecciona los primeros <var>n</var> elementos.
  figures:
  - en: <code>take</code> preserves the first <var>n</var> elements.
    es: <code>take</code> conserva los primeros <var>n</var> elements.

- name: takeRight
  signature: "def takeRight(n: Int): <em>Collection</em>[A]"
  description:
    en: Selects last <var>n</var> elements.
    es: Selecciona los últimos <var>n</var> elementos.
  figures:
  - en: <code>takeRight</code> preserves the last <var>n</var> elements.
    es: <code>takeRight</code> conserva los últimos <var>n</var> elements.

- name: takeWhile
  signature: "def takeWhile(p: (A) ⇒ Boolean): <em>Collection</em>[A]"
  description:
    en: Takes longest prefix of elements that satisfy a predicate.
    es: Toma el mayor prefijo de elementos que satisfacen un predicado.
  figures:
  - en: <code>takeWhile</code> preserves elements while they satisfy <code>p</code>.
    es: <code>takeWhile</code> conserva elementos mientras satisfacen <code>p</code>.

- name: union
  signature: "def union(that: Seq[A]): <em>Collection</em>[A]"
  description:
    en: Produces a new collection which contains all elements of this one and also all elements of a given sequence.
    es: Produce una nueva colección que contiene todos los elementos de esta y los de otra secuencia.

- name: unzip
  signature: "def unzip[A1, A2](implicit asPair: (A) ⇒ (A1, A2)): (<em>Collection</em>[A1], <em>Collection</em>[A2])"
  description:
    en: Converts this collection of pairs into two collections of the first and second half of each pair.
    es: Convierte esta colección de pares en dos colecciones, una compuesta por el primer miembro y otra por el segundo.
  figures:
  - en: <code>unzip</code> select the first/second component of each element in the collection in the first/second component of a tuple.
    es: <code>unzip</code> selecciona la primera/segunda componente de cada elemento en la colección en la primera/segunda componente de una tupla.

- name: unzip3
  signature: "def unzip3[A1, A2, A3](implicit asTriple: (A) ⇒ (A1, A2, A3)): (<em>Collection</em>[A1], <em>Collection</em>[A2], <em>Collection</em>[A3])"
  description:
    en: Converts this collection of triples into three collections of the first, second, and third element of each triple.
    es: Convierte esta colección de ternas en tres colecciones del primer, segundo y tercer elemento de cada terna.
  figures:
  - en: <code>unzip3</code> select the first/second/third component of each element in the collection in the first/second/third component of a tuple.
    es: <code>unzip3</code> selecciona la primera/segunda/ componente de cada elemento en la colección en la primera/segunda/tercera componente de una tupla.

- name: updated
  signature: "def updated(index: Int, elem: A): <em>Collection</em>[A]"
  description:
    en: A copy of this collection with one single replaced element.
    es: Una copia de esta colección con un único elemento reemplazado.
  figures:
  - en: <code>updates</code> changes the element at <var>index</var> by <var>elem</var> while preserving the rest.
    es: <code>updates</code> cambia el elemento en <var>index</var> por <var>elem</var> mientras conserva el resto.

- name: values
  signature: "def values: Iterable[V]"
  description:
    en: Collects all values of this map in an iterable collection.
    es: Recopila todos los valores de este mapa en una coleccion iterable.
  figures:
  - en: <code>values</code> returns an iterator to go through a map's values.
    es: <code>values</code> devuelve un iterador para recorrer los valores de un mapa.

- name: withDefault
  signature: "def withDefault[V1 >: V](f<sub>def</sub>: (K) ⇒ V1): Map[K, V1]"
  description:
    en: The same map with a given default function.
    es: El mismo mapa con una función predeterminada dado.
  figures:
  - en: <code>withDefault</code> uses <var>f<sub>def</sub></var> to generate a value when the map does not contain the requested key.
    es: <code>withDefault</code> utiliza <var>f<sub>def</sub></var> para generar un valor cuando el mapa no contiene la clave solicitada.

- name: withDefaultValue
  signature: "def withDefaultValue[V1 >: V](v<sub>def</sub>: V1): Map[K, V1]"
  description:
    en: The same map with a given default value.
    es: El mismo mapa con un valor predeterminado dado.
  figures:
  - en: <code>withDefaultValue</code> uses <var>v<sub>def</sub></var> as value when the map does not contain the requested key.
    es: <code>withDefaultValue</code> utiliza <var>v<sub>def</sub></var> como valor cuando el mapa no contiene la clave solicitada.

- name: zip
  signature: "def zip[B](that: GenIterable[B]): <em>Collection</em>[A, B]"
  description:
    en: Returns the collection formed from this and another one by combining corresponding elements in pairs.
    es: Devuelve la colección formada por los elementos de dos colecciones distintas combinados en parejas.
  figures:
  - en: <code>zip</code> builds a new collection by combining the i-th element of this/another collection into the first/second component of a tuple.
    es: <code>zip</code> construye una nueva colección combinando el i-esimo elemento de esta/otra colección en la primera/segunda componente de una tupla.

- name: zipAll
  signature: "def zipAll[B](that: Iterable[B], thisElem: A, thatElem: B): <em>Collection</em>[(A, B)]"
  description:
    en:
      Returns the collection formed from this and another one by combining corresponding elements in pairs.
      If one of the two collections is shorter than the other, placeholder elements are used to extend the shorter collection to the length of the longer.
    es:
      Devuelve la colección formada por los elementos de dos colecciones distintas combinados en parejas.
      Si una de las colecciones es menor que la otra, se usan elementos comodín en la más corta hasta alcanzar la longitud de la más larga.
  figures:
  - en: <code>zip</code> builds a new collection by combining the i th element of this/another collection into the first/second component of a tuple, using <var>a<sub>f</sub></var>/<var>b<sub>f</sub></var> as fill elements.
    es: <code>zip</code> construye una nueva colección combinando el i-esimo elemento de esta/otra colección en la primera/segunda componente de una tupla, utilizando <var>a<sub>f</sub></var>/<var>b<sub>f</sub></var> como elementos de relleno.

- name: zipWithIndex
  signature: "def zipWithIndex: <em>Collection</em>[A, Int]"
  description:
    en: Zips this collection with its indices.
    es: Combina cada elemento de esta colección con su índice.
  figures:
  - en: <code>zip</code> builds a new collection by combining in a tuple each element with its index.
    es: <code>zip</code> construye una nueva colección combinando en una tupla cada elemento con su índice.
